#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
const int mod = 1e9 + 7;
using ll = long long;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

bool visited[300001];
vector<vector<int>> ke(300001);
vector<int> val(300001, 1);
vector<int> ans(300001, 0);
int n;

void dfs(int u, int par){
	visited[u] = true;
	int tmp = 0;
	for(auto it : ke[u]){
		if(it != par){
			dfs(it, u);
			tmp += ans[it];
			val[u] += val[it];
		}
	}
	for(auto it : ke[u]){
		if(it != par){
			ans[u] = max(ans[u], tmp-ans[it]+val[it]-1);	
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	int t; cin >>t;
	while(t--){
		cin >> n;
		for (int i = 1; i <= n; i++) {
            ke[i].clear();
            val[i] = 1;
            ans[i] = 0;
            visited[i] = false;
        }
		for(int i = 0; i < n-1; i++){
			int x, y; cin >> x >> y;
			ke[x].push_back(y);
			ke[y].push_back(x);
		}
		dfs(1, 0);
		cout << ans[1] << endl;
	}
}
