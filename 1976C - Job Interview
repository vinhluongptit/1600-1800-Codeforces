#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
using ll = long long;
const int mod = 1e9 + 7;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

int main() {
	int t;
	cin >> t;
	while(t--){
		int n, m;
		cin >> n >> m;
		int tmp = n+m+1;
		vector<pair<int,int>> v(tmp);
		for(int i = 0; i < tmp; i++){
			cin >> v[i].first;
		}
		for(int i = 0; i < tmp; i++){
			cin >> v[i].second;
		}
		vector<ll> choice(tmp), vinh;
		int ok = -1;
		ll tot = 0;
		if(!n){
			for(int i = 0; i < tmp; i++){
				tot += v[i].second;
			}
			for(int i = 0; i < tmp; i++){
				cout << tot - v[i].second << " ";
			}
			cout << endl;
			continue;
		}if(!m){
			for(int i = 0; i < tmp; i++){
				tot += v[i].first;
			}
			for(int i = 0; i < tmp; i++){
				cout << tot - v[i].first << " ";
			}
			cout << endl;
			continue;
		}
		for(int i = 0; i < tmp-1; i++){
			if(v[i].first > v[i].second){
				if(n){
					tot += v[i].first;
					choice[i] = 1;
					n--;
				}else{
					if(ok == -1){
						ok = 1;
					}
					tot += v[i].second;
					choice[i] = 0;
					vinh.push_back(i);
					m--;
				}
			}else{
				if(m){
					tot += v[i].second;
					choice[i] = 0;
					m--;
				}else{
					if(ok == -1){
						ok = 0;
					}
					tot += v[i].first;
					choice[i] = 1;
					vinh.push_back(i);
					n--;
				}
			}
		}
//		for(int i = 0; i < tmp-1; i++) cout << choice[i] << " ";
//		cout << endl;
		vector<ll> ans(tmp);
		for(int i = 0; i < tmp-1; i++){
			if(ok == -1){
				ll hi = tot;
				if(choice[i] == 1){
					hi -= v[i].first;
					hi += v[tmp-1].first;
				}else{
					hi -= v[i].second;
					hi += v[tmp-1].second;
				}
				ans[i] = hi;
				continue;
			}
			if(choice[i] != ok){
				if(choice[i] == 1){
					ll hi = tot - v[i].first;
					if(vinh.empty()){
						if(v[tmp-1].first > v[tmp-1].second){
							hi += v[tmp-1].first;
						}else hi += v[tmp-1].second;
					}else{
						hi += v[tmp-1].first;
					}
					ans[i] = hi;
				}else{
					ll hi = tot - v[i].second;
					if(vinh.empty()){
						if(v[tmp-1].first > v[tmp-1].second){
							hi += v[tmp-1].first;
						}else hi += v[tmp-1].second;
					}else{
						hi += v[tmp-1].second;
					}
					ans[i] = hi;
				}
			}else{
				if(ok){
					ll hi = tot - v[i].first;
					auto it = upper_bound(vinh.begin(), vinh.end(), i);
					if(it == vinh.end()){
						hi += v[tmp-1].first;
					}else{
						hi -= v[*it].second;
						hi += v[*it].first;
						hi += v[tmp-1].second;
					}
					ans[i] = hi;
				}else{
					ll hi = tot - v[i].second;
					auto it = upper_bound(vinh.begin(), vinh.end(), i);
					if(it == vinh.end()){
						hi += v[tmp-1].second;
					}else{
						hi -= v[*it].first;
						hi += v[*it].second;
						hi += v[tmp-1].first;
					}
					ans[i] = hi;
				}
			}
		}
		ans[tmp-1] = tot;
		for(int i = 0; i < tmp; i++){
			cout << ans[i] << " ";
		}
		cout << endl;
	}
}
